spring.application.name=springboot3_api

spring.data.mongodb.uri=mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}?authSource=admin
spring.data.mongodb.host=${MONGODB_HOST}
spring.data.mongodb.port=${MONGODB_PORT}
spring.data.mongodb.database=${MONGODB_DATABASE}
spring.data.mongodb.username=${MONGODB_USER}
spring.data.mongodb.password=${MONGODB_PASSWORD}


jwt.secret=${JWT_SECRET}
# 1 day
jwt.expiration=86400000
# 10 years
#jwt.expiration=315576000000
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true

# File upload configuration
upload.path=${UPLOAD_PATH}
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:2MB}
spring.servlet.multipart.max-request-size=${MAX_FILE_SIZE:2MB}
spring.servlet.multipart.enabled=true

# Rate limiting configuration
rate-limit.unauthenticated-limit=30
rate-limit.authenticated-limit=60
rate-limit.admin-limit=100
rate-limit.time-window=1

sendgrid.key=${SENDGRID_KEY}
email.from=${EMAIL_FROM}

onesignal.app-id=${ONESIGNAL_APP_ID}
onesignal.key=${ONESIGNAL_KEY}

spring.data.mongodb.auto-index-creation=true

# OAuth2 configuration
# spring oauth2 security automatically adds /oauth2/authorization/{registrationId} to the redirect uri
# and looks for registrationId in the request parameters
# to match them with the corresponding client registration configuration here
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH2_GOOGLE_REPLY_URI}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

spring.security.oauth2.client.registration.apple.client-id=${APPLE_CLIENT_ID}
spring.security.oauth2.client.registration.apple.client-secret=${APPLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.apple.redirect-uri=${OAUTH2_APPLE_REPLY_URI}
spring.security.oauth2.client.registration.apple.scope=openid,email,profile
spring.security.oauth2.client.registration.apple.authorization-grant-type=authorization_code

# apple oauth2 provider configuration for spring security are usually needed
# while google oauth2 provider configuration are not needed as they built in
spring.security.oauth2.client.provider.apple.authorization-uri=https://appleid.apple.com/auth/authorize
spring.security.oauth2.client.provider.apple.token-uri=https://appleid.apple.com/auth/token
spring.security.oauth2.client.provider.apple.user-info-uri=https://appleid.apple.com/auth/keys
spring.security.oauth2.client.provider.apple.jwk-set-uri=https://appleid.apple.com/auth/keys

# shouldnt be needed
# spring.security.oauth2.client.provider.google.authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
# spring.security.oauth2.client.provider.token-uri: https://oauth2.googleapis.com/token
# spring.security.oauth2.client.provider.user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
# spring.security.oauth2.client.provider.jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
# spring.security.oauth2.client.provider.user-name-attribute: sub

# Step 1: Spring Security -> Google/Apple Oauth2 

# Step 2: Oauth2 -> our API Callback 
app.oauth2.redirectUri=${OAUTH2_REDIRECT_URI}

# Step 3: our API -> Mobile app deep link
app.deeplink=${API_DEEPLINK_URI}

# Server configuration
# open to all IP addresses
server.address=${SERVER_ADDRESS}
server.port=${SERVER_PORT}
servername=${SERVER_NAME}

server.ssl.enabled-protocols=TLSv1.2,TLSv1.3

# logging.level.org.springframework.security=DEBUG
# logging.level.org.springframework.web=DEBUG